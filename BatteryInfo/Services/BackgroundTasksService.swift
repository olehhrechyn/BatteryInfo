//
//  BackgroundTasksService.swift
//  BatteryInfo
//
//  Created by Oleh Hrechyn on 08.08.2025.
//

import BackgroundTasks
import UIKit

final class BackgroundTasksService {

    // –º–∞—î –±—É—Ç–∏ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –∞–ª–µ –≤ —Ä–∞–º–∫–∞—Ö –¢–ó –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ singleton
    static let shared = BackgroundTasksService()

    private init() {}

    func scheduleAppRefresh() {
        let request = BGAppRefreshTaskRequest(identifier: AppConstants.BGTask.refreshIdentifier)
        let time: TimeInterval = 120
        request.earliestBeginDate = Date(timeIntervalSinceNow: time)
        
        do {
            try BGTaskScheduler.shared.submit(request)
            print("‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ.")
        } catch {
            print("üõë –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è: \(error.localizedDescription)")
        }
    }

    func registerBackgroundTasks() {
        BGTaskScheduler.shared.register(forTaskWithIdentifier: AppConstants.BGTask.refreshIdentifier, using: nil) { task in
            guard let task = task as? BGAppRefreshTask else { return }
            self.handleAppRefresh(task: task)
        }
    }
}

private extension BackgroundTasksService {
    func handleAppRefresh(task: BGAppRefreshTask) {
        scheduleAppRefresh()

        let operation = BlockOperation {
            BatteryMonitoringService.shared.fetchAndUploadBatteryData { result in
                switch result {
                case .success(let level):
                    print("‚úÖ –§–æ–Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ. –†—ñ–≤–µ–Ω—å –∑–∞—Ä—è–¥—É: \(level)")
                    task.setTaskCompleted(success: true)
                case .failure(let error):
                    print("üõë –ü–æ–º–∏–ª–∫–∞ —É —Ñ–æ–Ω–æ–≤–æ–º—É –∑–∞–≤–¥–∞–Ω–Ω—ñ: \(error.localizedDescription)")
                    task.setTaskCompleted(success: false)
                }
            }
        }

        task.expirationHandler = {
            operation.cancel()
        }

        OperationQueue().addOperation(operation)
    }
}
